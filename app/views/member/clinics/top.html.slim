  - content_for(:body_attributes) do


  .top-image
    .clinic-top-image
    .top-band
      p.top-app-logo
        i.fas.fa-clinic-medical
        |  Medi Navi



  .text-center.search-form
    = form_tag(clinics_search_path, method: :get) do
      = text_field_tag :search, "", placeholder: " クリニック名・駅名・住所・電話番号", class: "search-field"
      = button_tag type: 'submit', class: 'btn btn-info search-submit' do
        i.fas.fa-search
        |  検索する

  .container
    .row
      .col-xs-7

        // ジャンル検索
        .row
          .genre-search-index
            .page-header
              h4
                i.fas.fa-align-left
                |  ジャンル一覧から探す

            .genre-index
              - @genres.each do |genre|
                = link_to clinics_genre_search_path(genre_id: genre.id), class: "genre-link" do
                  = genre.medical_department
                | 　｜　

        // google APIで検索
        .page-header
          h4
            i.fas.fa-map-marked-alt
            |  近くのクリニックを探す

        #map style='height: 400px; width: 700px;'

        - google_api = "https://maps.googleapis.com/maps/api/js?key=#{ ENV['GOOGLE_MAP_API'] }&callback=initMap".html_safe
        script{ async src=google_api }

        - if member_signed_in?
          javascript:

            let map;
            let marker = [];
            let infoWindow = [];
            let markerData = gon.clinics;

            function initMap() {
              geocoder = new google.maps.Geocoder()

              map = new google.maps.Map(document.getElementById('map'), {
                // コントローラーで定義した変数から緯度経度を呼び出し、マップの中心に表示
                center: {
                  lat: gon.member.latitude,
                  lng: gon.member.longitude
                },
                zoom: 15,
              });

              // 繰り返し処理でマーカーと吹き出しを複数表示させる
              for (var i = 0; i < markerData.length; i++) {
                let id = markerData[i]['id']

                      // 各地点の緯度経度を算出
                markerLatLng = new google.maps.LatLng({
                  lat: markerData[i]['latitude'],
                  lng: markerData[i]['longitude']
                });

                // 各地点のマーカーを作成
                marker[i] = new google.maps.Marker({
                  position: markerLatLng,
                  map: map
                });

                // マーカーにクリックイベントを追加
                markerEvent(i);
              }
            }

            // マーカーをクリックしたら吹き出しを表示
            function markerEvent(i) {
              marker[i].addListener('click', function () {
                infoWindow[i].open(map, marker[i]);
              });

              let id = markerData[i]['id']

              infoWindow[i] = new google.maps.InfoWindow({
                content: `<a href='/member/clinics/${ id }'>${ markerData[i]['name'] }</a>`
              });
            }
        - else
          javascript:

            let map;
            let marker = [];
            let infoWindow = [];
            let markerData = gon.clinics;

            function initMap() {
              geocoder = new google.maps.Geocoder()

              map = new google.maps.Map(document.getElementById('map'), {
                // コントローラーで定義した変数から緯度経度を呼び出し、マップの中心に表示
                center: {
                  lat: 35.681519,
                  lng: 139.767464
                },
                zoom: 14,
              });

              // 繰り返し処理でマーカーと吹き出しを複数表示させる
              for (var i = 0; i < markerData.length; i++) {
                let id = markerData[i]['id']

                      // 各地点の緯度経度を算出
                markerLatLng = new google.maps.LatLng({
                  lat: markerData[i]['latitude'],
                  lng: markerData[i]['longitude']
                });

                // 各地点のマーカーを作成
                marker[i] = new google.maps.Marker({
                  position: markerLatLng,
                  map: map
                });

                // マーカーにクリックイベントを追加
                markerEvent(i);
              }
            }

            // マーカーをクリックしたら吹き出しを表示
            function markerEvent(i) {
              marker[i].addListener('click', function () {
                infoWindow[i].open(map, marker[i]);
              });

              let id = markerData[i]['id']

              infoWindow[i] = new google.maps.InfoWindow({
                //content: `<a href='/member/clinics/${ id }'>${ markerData[i]['name'] }</a>`
                content: `<a href='/members/sign_in'>${ markerData[i]['name'] }</a>`
              });
            }

      / ------------------------------------------------------------------------------------------------------------------------------

      .col-xs-1

      .col-xs-4

        // カレンダー機能
        .page-header
          = link_to my_calendar_path do
            h3
              | マイカレンダー

        .row
          = link_to 'スケジュール登録', new_member_event_path, class: 'btn btn-success btn-xs'
          #calendar

        // pvランキング機能
        .pv-ranking style="margin-top: 40px;"
          table.table.table-bordered
            thead
              tr
                th.text-center
                  | 順位
                th
                  | クリニック
                th.text-center
                  | PV数

            tbody
              - @clinics.each.with_index(1) do |clinic, index|
                tr
                  td.text-center
                    = index
                    |  位
                  td
                    = link_to member_clinic_path(clinic), class:"pv-clinic-name" do
                      = clinic.name
                  td.text-center
                    = clinic.impressions_count

    
      
    // 都道府県検索
    .row  
      / h4.page-header
      /   i.fas.fa-globe-asia
      /   |  都道府県から探す      
      = javascript_include_tag 'jquery.japan-map.min.js'
      #map-container
    
    
